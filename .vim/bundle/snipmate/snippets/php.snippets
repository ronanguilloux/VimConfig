# Interface
snippet interface
	<?php
	
	namespace ${1:};
	
	/**
	 * ${3:Interface documentation}
	 *
	 * @author     `g:snips_author`
	 */
	interface ${2:`Filename('', 'myClass')`}
	{
	    ${4}
	}
# Class
snippet class
	<?php
	
	namespace ${1:};
	
	/**
	 * ${3:Class documentation}
	 *
	 * @author     `g:snips_author`
	 */
	class ${2:`Filename('', 'myClass')`}
	{
		${4}
	}
snippet if
	if (${1:/* condition */}) {
		${2}
	}
snippet ife
	if (${1:/* condition */}) {
		${2}
	} else {
		${3}
	}
	${4}
snippet else
	else {
		${1}
	}
snippet elseif
	elseif (${1:/* condition */}) {
		${2}
	}
snippet switch
	switch ($${1:variable}) {
		case ${2:value}:
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet case
	case ${1:value}:
		${2:// code...}
		break;${3}
snippet foreach
	foreach ($${1:variable} as $${2:value}) {
		${3}
	}
snippet fore value
	foreach ($${1:variable} as $${2:value}) {
		${3}
	}
snippet fore key => value
	foreach ($${1:variable} as $${2:key} => $${3:value}) {
		${4}
	}
snippet fun
	/**
	 * ${4:Function comment}
	 *
	 * @return ${5:null}
	 **/
	${1:public} function ${2:__construct}(${3})
	{
		${6}
	}
snippet nfun
	${1:public} function ${2:__construct}(${3})
	{
		${4}
	}
snippet -
	$this->${1:property} = $$2;
snippet cv
	/**
	 * ${3:Variable comment}
	 *
	 * @var ${4:string}
	 */
	${1:protected} $${2:};
	
	${6}
	/**
	 * @return $4
	 */
	public function get${5:}()
	{
		return $this->$2;
	}
	
	/**
	 * @param  $4
	 * @return null
	 */
	public function set$5($$2)
	{
	    $this->$2 = $$2;
	}

snippet xd
	xdebug_print_function_stack();${3}

# PHPUnit assertions
snippet assertArrayHasKey
	$this->assertArrayHasKey(${1:key}, ${2:array});
	${3}

snippet assertArrayNotHasKey
	$this->assertArrayNotHasKey(${1:key}, ${2:array});
	${3}

snippet assertAttributeContains
	$this->assertAttributeContains(${1:needle}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});
	${4}

snippet assertAttributeEquals
	$this->assertAttributeEquals(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});
	${4}

snippet assertAttributeGreaterThan
	$this->assertAttributeGreaterThan(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});
	${4}

snippet assertAttributeGreaterThanOrEqual
	$this->assertAttributeGreaterThanOrEqual(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});
	${4}

snippet assertAttributeLessThan
	$this->assertAttributeLessThan(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});
	${4}

snippet assertAttributeLessThanOrEqual
	$this->assertAttributeLessThanOrEqual(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});
	${4}

snippet assertAttributeNotContains
	$this->assertAttributeNotContains(${1:needle}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});
	${4}

snippet assertAttributeNotEquals
	$this->assertAttributeNotEquals(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});
	${4}

snippet assertAttributeNotSame
	$this->assertAttributeNotSame(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});
	${4}

snippet assertAttributeSame
	$this->assertAttributeSame(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});
	${4}

snippet assertClassHasAttribute
	$this->assertClassHasAttribute(${1:attributeName}, ${2:className});
	${3}

snippet assertClassHasStaticAttribute
	$this->assertClassHasStaticAttribute(${1:attributeName}, ${2:className});
	${3}

snippet assertClassNotHasAttribute
	$this->assertClassNotHasAttribute(${1:attributeName}, ${2:className});
	${3}

snippet assertClassNotHasStaticAttribute
	$this->assertClassNotHasStaticAttribute(${1:attributeName}, ${2:className});
	${3}

snippet assertContainsOnly
	$this->assertContainsOnly(${1:type}, ${2:haystack});
	${3}

snippet assertContains
	$this->assertContains(${1:needle}, ${2:haystack});
	${3}

snippet assertEquals
	$this->assertEquals(${1:expected}, ${2:actual});
	${3}

snippet assertFalse
	$this->assertFalse(${1:actual});
	${2}

snippet assertFileExists
	$this->assertFileExists(${1:fileName});
	${2}

snippet assertFileNotEquals
	$this->assertFileNotEquals(${1:expected}, ${2:actual});
	${3}

snippet assertFileNotExists
	$this->assertFileNotExists(${1:filename});
	${2}

snippet assertGreaterThan
	$this->assertGreaterThan(${1:expected}, ${1:actual});
	${3}

snippet assertLessThan
	$this->assertLessThan(${1:expected}, ${2:actual});
	${3}

snippet assertGreaterThanOrEqual
	$this->assertGreaterThanOrEqual(${1:expected}, ${2:actual});
	${3}

snippet assertLessThanOrEqual
	$this->assertLessThanOrEqual(${1:expected}, ${2:actual});
	${3}

snippet assertNotContainsOnly
	$this->assertNotContainsOnly(${1:type}, ${2:haystack});
	${3}

snippet assertNotContaints
	$this->assertNotContains(${1:needle}, ${2:haystack});
	${3}

snippet assertNotEquals
	$this->assertNotEquals(${1:expected}, ${2:actual});
	${3}

snippet assertNotRegExp
	$this->assertNotRegExp(${1:pattern}, ${2:string});
	${3}

snippet assertNotSame
	$this->assertNotSame(${1:expected}, ${2:actual});
	${3}

snippet assertNull
	$this->assertNull(${1:actual});
	${2}

snippet assertObjectHasAttribute
	$this->assertObjectHasAttribute(${1:attributeName}, ${2:object});
	${3}

snippet assertObjectHasNotAttribute
	$this->assertObjectHasNotAttribute(${1:attributeName}, ${2:object});
	${3}

snippet assertRegExp
	$this->assertRegExp(${1:pattern}, ${2:string});
	${3}

snippet assertSame
	$this->assertSame(${1:expected}, ${2:actual});
	${3}

snippet assertSelectEquals
	$this->assertSelectEquals(${1:selector}, ${2:content}, ${3:count}, ${4:actual});
	${5}

snippet assertSelectRegExp
	$this->assertSelectRegExp(${1:selector}, ${2:pattern}, ${3:count}, ${4:actual});
	${5}

snippet assertStringEndsNotWith
	$this->assertStringEndsNotWith(${1:suffix}, ${2:string});
	${3}

snippet assertStringEndsWith
	$this->assertStringEndsWith(${1:suffix}, ${2:string});
	${3}

snippet assertStringEqualsFile
	$this->assertStringEqualsFile(${1:expectedFile}, ${2:actualString});
	${3}

snippet assertStringNotEqualsFile
	$this->assertStringNotEqualsFile(${1:expectedFile}, ${2:actualString});
	${3}

snippet assertStringStartsNotWith
	$this->assertStringStartsNotWith(${1:prefix}, ${2:string});
	${3}

snippet assertStringStartsWith
	$this->assertStringStartsWith(${1:prefix}, ${2:string});
	${3}

snippet assertTag
	$this->assertTag(${1:matcher}, ${2:actual});
	${3}

snippet assertThat
	$this->assertThat(${1:value}, ${2:constraint});
	${3}

snippet assertTrue
	$this->assertTrue(${1:actual});
	${2}

snippet expectedException
	/**
	 * @expectedException ${1:ExceptionType}
	 */
	${2}

# Fixtures

snippet setUp 
	protected function setUp()
	{
	    ${1}
	}

snippet tearDown 
	protected function tearDown()
	{
	    ${1}
	}
